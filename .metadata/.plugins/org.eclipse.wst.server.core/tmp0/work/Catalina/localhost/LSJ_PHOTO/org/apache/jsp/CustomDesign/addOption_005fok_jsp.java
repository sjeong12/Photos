/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2016-12-11 07:31:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.CustomDesign;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;

public final class addOption_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/include/dbinfo.inc", Long.valueOf(1481076272000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("utf-8"); 
      out.write('\r');
      out.write('\n');

Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
String connectionURL = "jdbc:sqlserver://localhost:1433;databaseName=DBPstudio;user=sa;password=11";
Connection con = DriverManager.getConnection(connectionURL);

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

String realFolder = "";
//String saveFolder = "d:/lsj531/workspace531/LSJ_HOME/WebContent/lsj531/chap10/boardD/upfile";
//String saveFolder = "d:/website/ROOT/LSJ_HOME/WebContent/lsj531/chap10/boardD/upfile";
String saveFolder = "/productImage";
String encType = "utf-8";


String code= request.getParameter("pcode");
int category= Integer.valueOf(request.getParameter("category"));
int d_num= Integer.valueOf(request.getParameter("dnum"));

ResultSet rs = null;
ResultSet rs2 = null;
PreparedStatement pstmt = null;

try
{
	String SQL = "select S.Category_Num, P.SubCategory_Num from Product P, Sub_Category S ";
	SQL = SQL + "where P.SubCategory_Num = S.Sub_Category_Num ";
	SQL = SQL + "and Product_Code= ? ";
    
    pstmt = con.prepareStatement(SQL);
    pstmt.setString(1, code);
	rs = pstmt.executeQuery();
	
	if(rs.next()){
	 int subCategory= rs.getInt("SubCategory_Num");
     int getCategory= rs.getInt("Category_Num");
     
     if (getCategory!=category)
	   {
		   out.println("<script language=javascript>");
		   out.println("alert('선택하신 카테고리에 해당하지 않는 옵션입니다');");
		   out.println("location.href='/LSJ_PHOTO/home.jsp?page=/CustomDesign/customDesign';");
		   out.println("</script>");
	   }
     else{
     
     
     
     String SQL3 = "select DOP_NUM, SubCategory_Num from Design_Option D, Product P ";
	 SQL3 = SQL3 + "where P.Product_Code=D.Product_Code and D.D_NUM = ? and P.SubCategory_Num= ?";
	    
	    pstmt = con.prepareStatement(SQL3);
	    pstmt.setInt(1, d_num);
	    pstmt.setInt(2, subCategory);
		rs2 = pstmt.executeQuery();
	 
	 if(rs2.next()){
		 int doNum= rs2.getInt("DOP_NUM");
		 
		 String SQL2 ="update Design_Option set Product_Code = ? ";
		 SQL2 = SQL2 + "where DOP_NUM = ? and D_NUM = ? ";

			pstmt = con.prepareStatement(SQL2);
			pstmt.setString(1, code);
			pstmt.setInt(2, doNum);
			pstmt.setInt(3, d_num);
			pstmt.executeUpdate();
		 
		   out.println("<script language=javascript>");
		   out.println("alert('옵션을 변경하였습니다');");
		   out.println("location.href='/LSJ_PHOTO/home.jsp?page=/CustomDesign/customDesign';");
		   out.println("</script>");
	 }
	 else
	 {
	
	String SQL2 ="INSERT INTO Design_Option(Product_Code ,D_NUM) VALUES (?, ?)";
	pstmt = con.prepareStatement(SQL2);

	pstmt.setString(1, code);
	pstmt.setInt(2, d_num);
	pstmt.executeUpdate();
	
	out.println("<script language=javascript>");
	   out.println("alert('옵션을 추가하였습니다');");
	   out.println("location.href='/LSJ_PHOTO/home.jsp?page=/CustomDesign/customDesign';");
	   out.println("</script>");
	 }
     
     
     
	}
    

	}
} // try end

catch(SQLException e1){
	out.println(e1.getMessage());
} // catch SQLException end

catch(Exception e2){
	e2.printStackTrace();
} // catch Exception end

finally{
	if (pstmt != null) pstmt.close();
	if (con   != null) con.close();

	//response.sendRedirect("/LSJ_PHOTO/home.jsp?page=/CustomDesign/customDesign");
} // finally end

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
