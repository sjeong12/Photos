/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2016-12-07 05:58:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.boardD;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class boardDlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/include/dbinfo.inc", Long.valueOf(1481076272916L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("utf-8"); 
      out.write("\r\n");
      out.write("<HTML>\r\n");
      out.write("<HEAD>\r\n");
      out.write("  <TITLE>파일 리스트</TITLE>\r\n");
      out.write("</HEAD>\r\n");
      out.write("\r\n");
      out.write("<H3>파일 리스트</H3>\r\n");
      out.write("\r\n");
      out.write("<BODY>\r\n");


String in_search_key	= request.getParameter("search_key");
if (in_search_key == null) in_search_key = "";

String in_search_value	= request.getParameter("search_value");
if (in_search_value == null) in_search_value = "";


      out.write("\r\n");
      out.write("<FORM NAME=frm1 ACTION=\"boardDlist.jsp\" METHOD=post>\r\n");
      out.write("\t<SELECT  NAME = \"search_key\">\r\n");
      out.write("\t\t<OPTION VALUE=\"title\" ");
 if(in_search_key.equals("title")) out.print (" selected"); 
      out.write(" >제목</OPTION>\r\n");
      out.write("\t\t<OPTION VALUE=\"writer\" ");
 if(in_search_key.equals("writer")) out.print (" selected"); 
      out.write(">작성자</OPTION>\r\n");
      out.write("\t</SELECT>\r\n");
      out.write("\t<INPUT TYPE = text   NAME = \"search_value\" VALUE=\"");
      out.print( in_search_value );
      out.write("\">\r\n");
      out.write("\t<INPUT TYPE = submit VALUE = \"검색\">\r\n");
      out.write("</FORM>\r\n");
      out.write("\r\n");
      out.write("<TABLE border = \"1\" cellspacing = \"0\" cellpadding = \"2\" width = \"600\">      \r\n");
      out.write("\r\n");
      out.write("<TR bgcolor = \"cccccc\">       \r\n");
      out.write("\t<TH WIDTH = \"10%\"><font size=2><center><b>번호</b></center></font></TH>      \r\n");
      out.write("\t<TH WIDTH = \" *%\"><font size=2><center><b>제목</b></center></font></TH>      \r\n");
      out.write("\t<TH WIDTH = \"10%\"><font size=2><center><b>첨부</b></center></font></TH>      \r\n");
      out.write("\t<TH WIDTH = \"15%\"><font size=2><center><b>작성자</b></center></font></TH>      \r\n");
      out.write("\t<TH WIDTH = \"17%\"><font size=2><center><b>등록일</b></center></font></TH>      \r\n");
      out.write("\t<TH WIDTH = \"10%\"><font size=2><center><b>조회수</b></center></font></TH>      \r\n");
      out.write("</TR> \r\n");
      out.write("\r\n");

Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
String connectionURL = "jdbc:sqlserver://localhost:1433;databaseName=DBPstudio;user=sa;password=11";
Connection con = DriverManager.getConnection(connectionURL);

      out.write('\r');
      out.write('\n');
      out.write("\t\t\r\n");
      out.write("\r\n");

ResultSet rs = null, rs2 = null;
Statement stmt = null;

try
{
	String strPageNum = request.getParameter("PageNum");	// 선택된 페이지 번호 참조
	if (strPageNum == null) {
		strPageNum = "1";
	}

	int currentPage = Integer.parseInt(strPageNum);			// 현재 페이지
	int pageSize	= 10;
	
	stmt = con.createStatement();

	String strSQL = "select isnull(count(*), 0) from boardD";
	if (in_search_value.equals("") == false) {
		strSQL = strSQL + " where " + in_search_key + " like '%" + in_search_value + "%'";
	}
	rs2 = stmt.executeQuery(strSQL);

	int totalRecords	= 0;	// ResultSet 객체 내의 레코드 수를 저장하기 위한 변수 

	rs2.next();					// 첫번째 레코드로 이동
	if (rs2.getInt(1) == 0){	// 만약 테이블에 데이터가 없다면

      out.write("\r\n");
      out.write("\t\t<TR>      \r\n");
      out.write("\t\t\t<TD colspan=6><center>등록된 게시글이 없습니다</center></TD>      \r\n");
      out.write("\t\t</TR>\r\n");
 
	}
	else
	{	
		totalRecords = rs2.getInt(1); 

		strSQL = "SELECT TOP " + pageSize + " num, title, writer, CONVERT(CHAR(10), updatedtm, 120) writedt, readcnt, upfile1, upfile2 FROM boardD  WHERE num NOT IN (SELECT TOP ";
		strSQL = strSQL  + (currentPage - 1) * pageSize + " num FROM boardD ";
		if (in_search_value.equals("") == false) {
			strSQL = strSQL + " where " + in_search_key + " like '%" + in_search_value + "%'";
		}
		strSQL = strSQL  + " ORDER BY num DESC)";
		if (in_search_value.equals("") == false) {
			strSQL = strSQL + " and " + in_search_key + " like '%" + in_search_value + "%'";
		}		
		strSQL = strSQL  + " ORDER BY num DESC";

		rs = stmt.executeQuery(strSQL);			// 현재 페이지에 출력할 회원만 select

		int pageSize_temp = pageSize;			// 현재 표시될 라인을 하나씩 줄임

		while(rs.next() && pageSize_temp > 0){

			int num			= rs.getInt("num");
			String title	= rs.getString("title");
			String writer	= rs.getString("writer");
			String writedt	= rs.getString("writedt");
			int readcnt		= rs.getInt("readcnt");
			String file1	= rs.getString("upfile1");
 			String file2	= rs.getString("upfile2");


      out.write("\r\n");
      out.write("\t\t\t<TR>      \r\n");
      out.write("\t\t\t\t<TD ALIGN = \"center\"><a href=\"boardDview.jsp?pnum=");
      out.print( num );
      out.write('"');
      out.write('>');
      out.print( num );
      out.write("</a></TD>      \r\n");
      out.write("\t\t\t\t<TD><a href=\"boardDview.jsp?pnum=");
      out.print( num );
      out.write('"');
      out.write('>');
      out.print( title );
      out.write("</a></TD>      \r\n");
      out.write("\t\t\t\t<TD ALIGN = \"center\">");
 if (file1 != null && file2 != null) { 
      out.write("<IMG SRC=\"/boardD/icon_file.gif\">");
 } 
      out.write("</TD>      \r\n");
      out.write("\t\t\t\t<TD ALIGN = \"center\">");
      out.print( writer	   );
      out.write("</TD>      \r\n");
      out.write("\t\t\t\t<TD ALIGN = \"center\">");
      out.print( writedt   );
      out.write("</TD>      \r\n");
      out.write("\t\t\t\t<TD ALIGN = \"center\">");
      out.print( readcnt   );
      out.write("</TD>      \r\n");
      out.write("\t\t\t</TR>   \r\n");
		
			pageSize_temp = pageSize_temp - 1;      // 현재 표시될 라인을 하나씩 줄임

		} // while(rs.next() && pageSize_temp > 0) end

	} //if (rs2.next() == false) else end

      out.write("\r\n");
      out.write("\t</TABLE><br><br>    \r\n");
      out.write("\r\n");

	// 총 페이지 수를 계산
	int intTotPages	= 0;
	int intR		= totalRecords % pageSize;
	if	(intR == 0) {
		intTotPages = totalRecords / pageSize;
	}
	else
	{
		intTotPages = totalRecords / pageSize + 1;          // 나머지가 0 보다 크면 총 페이지 수는 몫 + 1
	}

	int intGrpSize  = 10;									// 그룹 당 페이지 수 설정                   
	int currentGrp  = 0;									// 현 그룹 No.
		intR		= currentPage % intGrpSize;
	if	(intR == 0) {										
		currentGrp	= currentPage / intGrpSize;
	}
	else
	{
		currentGrp	= currentPage / intGrpSize + 1;
	}

	int intGrpStartPage	= (currentGrp   - 1) * intGrpSize + 1;	// 현 그룹 시작 페이지
	int intGrpEndPage	=  currentGrp * intGrpSize;				// 현 그룹   끝 페이지
	if (intGrpEndPage > intTotPages){
		intGrpEndPage	= intTotPages;
	}
	if (currentGrp > 1){

      out.write("\r\n");
      out.write("\t\t[<A href=\"boardDlist.jsp?PageNum=");
      out.print( intGrpStartPage - 1 );
      out.write("\">이전</A>]\r\n");

	}

	int	intGrpPageCount		= intGrpSize;								// 그룹 당 페이지 수    
	int intIndex			= intGrpStartPage;							// 현 그룹 시작 페이지

	while (intGrpPageCount > 0 && intIndex <= intGrpEndPage){

      out.write("\r\n");
      out.write("\t\t[<A href=\"boardDlist.jsp?PageNum=");
      out.print( intIndex );
      out.write('"');
      out.write('>');
      out.print( intIndex );
      out.write("</A>] &nbsp; \r\n");

		intIndex		= intIndex + 1;
		intGrpPageCount = intGrpPageCount    - 1;
	}

	if (intIndex <= intTotPages){

      out.write("\r\n");
      out.write("\t\t[<A href=\"boardDlist.jsp?PageNum=");
      out.print( intIndex );
      out.write("\">다음</A>]\r\n");

	}

} // try end

catch(SQLException e1){
	out.println(e1.getMessage());
} // catch SQLException end

catch(Exception e2){
	e2.printStackTrace();
} // catch Exception end

finally{
	if (stmt != null) stmt.close();
	if (rs   != null) rs.close();
	if (rs2  != null) rs2.close();
	if (con  != null) con.close();
} // finally end

      out.write("\r\n");
      out.write("<br><br>\r\n");
      out.write("<FORM NAME = \"frm1\" ACTION = \"boardDwrite.jsp\" METHOD = \"post\">\r\n");
      out.write("\t<INPUT TYPE = \"submit\" VALUE = \"새글쓰기\">\r\n");
      out.write("</FORM>\r\n");
      out.write("</BODY>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
