/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2016-12-10 09:07:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.category;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;

public final class main_005fpopular_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("utf-8"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html> \r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"bottom\" style=\"text-align:center;\">\r\n");
      out.write("\t\t<img src=\"/LSJ_PHOTO/homepageImage/eventBanner2.png\" border=\"0\" width=\"680\"/>\r\n");
      out.write("\t\t<br/><br/><br/>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<table width=\"800\" border=\"0\" cellpadding=\"7\" align=\"center\" valign=\"middle\"> \r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
  
Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
String connectionURL = "jdbc:sqlserver://localhost:1433;databaseName=DBPstudio;user=sa;password=11";
Connection con = DriverManager.getConnection(connectionURL);
Statement stmt = null;
ResultSet rs = null;

 //    try
 //    {
String SQL= "select Product_Code, Product_Name, Product_Image, Product_Amount, Product_Price, Product_Info, Product_Popular from Product order by Product_Popular desc";
//String SQL= "select * from Product";
stmt = con.createStatement();
rs = stmt.executeQuery(SQL);


int count=0; //한 줄에 몇개의 상품이 들어가는지 카운트. 0이면 다음 행으로

	while(rs.next()) {
		
	String code = rs.getString("Product_Code");
	String name = rs.getString("Product_Name");
	String image = rs.getString("Product_Image");
	String info	= rs.getString("Product_Info");
	
	int price = rs.getInt("Product_Price");
	int amount = rs.getInt("Product_Amount");
	int popular = rs.getInt("Product_Popular");
	
	
	if(count >= 5){
		count=0;
		
      out.write(" <tr/> ");

	}
	
	if(count == 0){
		
      out.write(" <tr> ");

	}


      out.write("\r\n");
      out.write("\t\t<td onmouseover=\"this.style.backgroundColor='F6F6F6';\" onmouseout=\"this.style.backgroundColor='white'; \">\r\n");
      out.write("\t\t<div id=\"bottom\" style=\"font-size:12px; text-align:center;\">\r\n");
      out.write("\t\t\t<a href=\"/LSJ_PHOTO/home.jsp?page=/category/productView&pcode=");
      out.print(code);
      out.write("\">\r\n");
      out.write("\t\t\t<img src=\"/LSJ_PHOTO/productImage/");
      out.print(image);
      out.write("\" border=\"0\" width=\"100\" height=\"100\"/>\r\n");
      out.write("\t\t\t</a><br/><br/>\r\n");
      out.write("\t\t\t");
      out.print(name );
      out.write(" <br/>\r\n");
      out.write("\t\t\t");
      out.print(price );
      out.write("원\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t</td>\r\n");


	count++;

}    


//     } //try end

//     catch(SQLException e1){
 //    	out.println(e1.getMessage());
  //   } // catch SQLException end

//     catch(Exception e2){
//     	e2.printStackTrace();
//     } // catch Exception end

//     finally{
     	if (stmt != null) stmt.close();;
     	if (rs    != null) rs.close();
     	if (con   != null) con.close();
//     } // finally end

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\r\n");
      out.write("\t</body>\r\n");
      out.write("\t</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
